import os
import streamlit as st
import time
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import RetrievalQAWithSourcesChain
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import UnstructuredURLLoader
from langchain.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.docstore.document import Document
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(layout="wide")
st.title("News Research Tool")
st.sidebar.title("News Article URLs")

urls = []
for i in range(3):
    url = st.sidebar.text_input(f"URL {i+1}")
    urls.append(url)

process_url = st.sidebar.button("Process URL")
vector_store_path = "faiss_index"

# Define the local path for your Hugging Face model
HUGGINGFACE_MODEL_PATH = r"C:\Your_File_path\all-MiniLM-L6-v2"

main_placeholder = st.empty()
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash")

if process_url:
    # 1. Loading data from URLs
    loader = UnstructuredURLLoader(urls=urls)
    main_placeholder.text("Data Loading Started...")
    data = loader.load()

    # 2. Splitting data into smaller chunks
    text_splitter = RecursiveCharacterTextSplitter(
        separators=['\n', '\n\n', '.', ','],
        chunk_size=1000,
        chunk_overlap=50
    )
    main_placeholder.text("Text Splitting Started...")
    docs = text_splitter.split_documents(data)

    # 3. Using a local Hugging Face model for embeddings
    main_placeholder.text("Building vector store with local embeddings...")
    embeddings = HuggingFaceEmbeddings(model_name=HUGGINGFACE_MODEL_PATH)
    vectorstore = FAISS.from_documents(docs, embeddings)
    vectorstore.save_local(vector_store_path)
    main_placeholder.success("Vector store saved successfully!")

# Load the vector store if it exists
loaded_vectorstore = None
if os.path.exists(vector_store_path):
    with st.spinner("Loading vector store..."):
        embeddings = HuggingFaceEmbeddings(model_name=HUGGINGFACE_MODEL_PATH)
        loaded_vectorstore = FAISS.load_local(
            vector_store_path,
            embeddings,
            allow_dangerous_deserialization=True
        )
    st.sidebar.success("Vector store loaded!")
else:
    st.sidebar.warning("Vector store not found. Please process URLs first.")

query = st.text_input("Question:")

if query and loaded_vectorstore:
    main_placeholder.text("Searching for answers...")
    chain = RetrievalQAWithSourcesChain.from_llm(llm=llm, retriever=loaded_vectorstore.as_retriever())
    result = chain.invoke({"question": query}, return_only_outputs=True)

    st.header("Answer")
    st.write(result["answer"])

    sources = result.get("sources", "")
    if sources:
        st.subheader("Sources")
        for source in sources.split(','):
            st.markdown(f"[{source.strip()}]({source.strip()})")
    main_placeholder.empty()
